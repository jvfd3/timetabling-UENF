AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "OurClass>SAM>General>"

Resources:
  # LAYERS
  dbFunctionLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dbFunctionSAM
      Description: connect to db
      ContentUri: ./layers/dbConnection
      CompatibleRuntimes:
        - nodejs14.x
        - nodejs16.x
        - nodejs18.x
  auxFunctionLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: auxFunctionsSAM
      Description: getPayload
      ContentUri: ./layers/auxFunctions
      CompatibleRuntimes:
        - nodejs14.x
        - nodejs16.x
        - nodejs18.x
  # defaultCRUDFunctionLayer:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: defaultCRUDSAM
  #     Description: default CRUD functions
  #     ContentUri: ./layers/defaultCRUD
  #     CompatibleRuntimes:
  #       - nodejs14.x
  #       - nodejs16.x
  #       - nodejs18.x

  # API GATEWAY
  TimetablingAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: timetablingStage
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # LAMBDA FUNCTIONS
  createProfessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createProfessor
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/professor/createProfessor
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /professor
            Method: post
            RestApiId: !Ref TimetablingAPI
  readProfessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: readProfessor
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/professor/readProfessor
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /professor
            Method: get
            RestApiId: !Ref TimetablingAPI
  updateProfessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateProfessor
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/professor/updateProfessor
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /professor
            Method: put
            RestApiId: !Ref TimetablingAPI
  deleteProfessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteProfessor
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/professor/deleteProfessor
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /professor/{id}
            Method: delete
            RestApiId: !Ref TimetablingAPI
  createSubject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createSubject
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/subject/createSubject
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /subject
            Method: post
            RestApiId: !Ref TimetablingAPI
  readSubject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: readSubject
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/subject/readSubject
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /subject
            Method: get
            RestApiId: !Ref TimetablingAPI
  updateSubject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateSubject
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/subject/updateSubject
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /subject
            Method: put
            RestApiId: !Ref TimetablingAPI
  deleteSubject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteSubject
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/subject/deleteSubject
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /subject/{id}
            Method: delete
            RestApiId: !Ref TimetablingAPI
  createStudent:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createStudent
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/student/createStudent
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /student
            Method: post
            RestApiId: !Ref TimetablingAPI
  readStudent:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: readStudent
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/student/readStudent
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /student
            Method: get
            RestApiId: !Ref TimetablingAPI
  updateStudent:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateStudent
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/student/updateStudent
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /student
            Method: put
            RestApiId: !Ref TimetablingAPI
  deleteStudent:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteStudent
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/student/deleteStudent
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /student/{id}
            Method: delete
            RestApiId: !Ref TimetablingAPI
  createRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createRoom
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Timeout: 30
      Handler: index.handler
      CodeUri: ./lambdas/room/createRoom
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /room
            Method: post
            RestApiId: !Ref TimetablingAPI
  readRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: readRoom
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Timeout: 30
      Handler: index.handler
      CodeUri: ./lambdas/room/readRoom
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /room
            Method: get
            RestApiId: !Ref TimetablingAPI
  updateRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateRoom
      Runtime: nodejs14.x
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/room/updateRoom
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /room
            Method: put
            RestApiId: !Ref TimetablingAPI
  deleteRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteRoom
      Runtime: nodejs14.x
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/room/deleteRoom
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /room/{id}
            Method: delete
            RestApiId: !Ref TimetablingAPI
  createClassData:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createClassData
      Runtime: nodejs14.x
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/classData/createClassData
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /classData
            Method: post
            RestApiId: !Ref TimetablingAPI
  readClassData:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: readClassData
      Runtime: nodejs14.x
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/classData/readClassData
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
        - !Ref auxFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /classData
            Method: get
            RestApiId: !Ref TimetablingAPI
  updateClassData:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateClassData
      Runtime: nodejs14.x
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/classData/updateClassData
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
        - !Ref auxFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /classData
            Method: put
            RestApiId: !Ref TimetablingAPI
  deleteClassData:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteClassData
      Runtime: nodejs14.x
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/classData/deleteClassData
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
        - !Ref auxFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /classData/{id}
            Method: delete
            RestApiId: !Ref TimetablingAPI
  createClassTime:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createClassTime
      Runtime: nodejs14.x
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/classTime/createClassTime
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
        - !Ref auxFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /classTime
            Method: post
            RestApiId: !Ref TimetablingAPI
  readClassTime:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: readClassTime
      Runtime: nodejs14.x
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/classTime/readClassTime
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
        - !Ref auxFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /classTime
            Method: get
            RestApiId: !Ref TimetablingAPI
  updateClassTime:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateClassTime
      Runtime: nodejs14.x
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/classTime/updateClassTime
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
        - !Ref auxFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /classTime
            Method: put
            RestApiId: !Ref TimetablingAPI
  deleteClassTime:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteClassTime
      Runtime: nodejs14.x
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: ./lambdas/classTime/deleteClassTime
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
        - !Ref dbFunctionLayer
        - !Ref auxFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /classTime/{id}
            Method: delete
            RestApiId: !Ref TimetablingAPI
