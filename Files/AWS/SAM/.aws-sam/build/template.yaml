AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: OurClass>SAM>General>
Resources:
  dbFunctionLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dbFunctionSAM
      Description: connect to db
      ContentUri: ..\..\layers\dbConnection
      CompatibleRuntimes:
      - nodejs14.x
      - nodejs16.x
      - nodejs18.x
  auxFunctionLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: auxFunctionsSAM
      Description: getPayload
      ContentUri: ..\..\layers\auxFunctions
      CompatibleRuntimes:
      - nodejs14.x
      - nodejs16.x
      - nodejs18.x
  TimetablingAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: timetablingStage
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: '''GET,POST,PUT,DELETE,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
  createProfessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createProfessor
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: createProfessor
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
      - Ref: dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /professor
            Method: post
            RestApiId:
              Ref: TimetablingAPI
    Metadata:
      SamResourceId: createProfessor
  readProfessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: readProfessor
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: readProfessor
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
      - Ref: dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /professor
            Method: get
            RestApiId:
              Ref: TimetablingAPI
    Metadata:
      SamResourceId: readProfessor
  updateProfessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateProfessor
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: updateProfessor
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
      - Ref: dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /professor
            Method: put
            RestApiId:
              Ref: TimetablingAPI
    Metadata:
      SamResourceId: updateProfessor
  deleteProfessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteProfessor
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: deleteProfessor
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
      - Ref: dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /professor/{id}
            Method: delete
            RestApiId:
              Ref: TimetablingAPI
    Metadata:
      SamResourceId: deleteProfessor
  createSubject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createSubject
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: createSubject
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
      - Ref: dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /subject
            Method: post
            RestApiId:
              Ref: TimetablingAPI
    Metadata:
      SamResourceId: createSubject
  readSubject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: readSubject
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: readSubject
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
      - Ref: dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /subject
            Method: get
            RestApiId:
              Ref: TimetablingAPI
    Metadata:
      SamResourceId: readSubject
  updateSubject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateSubject
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: updateSubject
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
      - Ref: dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /subject
            Method: put
            RestApiId:
              Ref: TimetablingAPI
    Metadata:
      SamResourceId: updateSubject
  deleteSubject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteSubject
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: deleteSubject
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
      - Ref: dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /subject/{id}
            Method: delete
            RestApiId:
              Ref: TimetablingAPI
    Metadata:
      SamResourceId: deleteSubject
  createStudent:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createStudent
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: createStudent
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
      - Ref: dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /student
            Method: post
            RestApiId:
              Ref: TimetablingAPI
    Metadata:
      SamResourceId: createStudent
  readStudent:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: readStudent
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: readStudent
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
      - Ref: dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /student
            Method: get
            RestApiId:
              Ref: TimetablingAPI
    Metadata:
      SamResourceId: readStudent
  updateStudent:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateStudent
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: updateStudent
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
      - Ref: dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /student
            Method: put
            RestApiId:
              Ref: TimetablingAPI
    Metadata:
      SamResourceId: updateStudent
  deleteStudent:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteStudent
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: deleteStudent
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
      - Ref: dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /student/{id}
            Method: delete
            RestApiId:
              Ref: TimetablingAPI
    Metadata:
      SamResourceId: deleteStudent
  createRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createRoom
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Timeout: 30
      Handler: index.handler
      CodeUri: createRoom
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
      - Ref: dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /room
            Method: post
            RestApiId:
              Ref: TimetablingAPI
    Metadata:
      SamResourceId: createRoom
  readRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: readRoom
      Runtime: nodejs14.x
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Timeout: 30
      Handler: index.handler
      CodeUri: readRoom
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
      - Ref: dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /room
            Method: get
            RestApiId:
              Ref: TimetablingAPI
    Metadata:
      SamResourceId: readRoom
  updateRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateRoom
      Runtime: nodejs14.x
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: updateRoom
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
      - Ref: dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /room
            Method: put
            RestApiId:
              Ref: TimetablingAPI
    Metadata:
      SamResourceId: updateRoom
  deleteRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteRoom
      Runtime: nodejs14.x
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LambdaRole
      Handler: index.handler
      CodeUri: deleteRoom
      Environment:
        Variables:
          SECRET_NAME: timetablingSecrets
      Layers:
      - Ref: dbFunctionLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /room/{id}
            Method: delete
            RestApiId:
              Ref: TimetablingAPI
    Metadata:
      SamResourceId: deleteRoom
