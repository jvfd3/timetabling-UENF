AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "OurClass>RDS>"

Resources:
  OurClassRDS:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      Engine: mysql
      EngineVersion: 5.7
      MasterUsername: annabell
      MasterUserPassword: tang
      DBInstanceIdentifier: ourclass-rds
      PubliclyAccessible: true
      StorageType: gp2
      VPCSecurityGroups: !Ref RDSVPCSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      MultiAZ: false
      DeletionPolicy: Delete
  RDSVPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "OurClass>RDS>SecurityGroup"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "3306"
          ToPort: "3306"
          CidrIp: "::/0"
  MyVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      AmazonProvidedIpv6CidrBlock: true
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: My VPC
  MyEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
  MyVPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyIGW
  MySubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: "true"
      Ipv6CidrBlock: !Select [0, !GetAtt MyVPC.Ipv6CidrBlocks]
      Tags:
        - Key: Name
          Value: My Subnet
  MyRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MyVPC
  MyRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref MyIGW
  MySubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref MySubnet
      RouteTableId: !Ref MyRouteTable
  MyNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref MyVPC
  MyIngressAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: allow
      Egress: "false"
      CidrBlock: "::/0"
  MyEgressAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: allow
      Egress: "true"
      CidrBlock: "::/0"
  MyNetworkAclSubnetAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref MySubnet
      NetworkAclId: !Ref MyNetworkAcl
  MySecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: My security group
      VpcId: !Ref MyVPC
  MyIGW:
    Type: "AWS::EC2::InternetGateway"
  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: My DB subnet group
      SubnetIds:
        - !Ref MySubnet
